#!/usr/bin/env groovy

@Grab('org.apache.commons:commons-exec:1.3')

import groovy.text.SimpleTemplateEngine
import org.apache.commons.exec.CommandLine
import groovy.cli.commons.CliBuilder

/* 
we use only one class for handling all pipeline structure (directives) and don't modularize into
classes (eg: Stage, Option, PostExecution, etc) to avoid adding too much complexity (classes,
methods, etc) even though current approach is not very clean (use some "global" variables which are
modified by each directive)
*/

class LocalPiper {

    def workspace = System.getProperty("user.dir")
    def branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

    def templateEngine = new SimpleTemplateEngine()
    def env = ['HOME'       : System.getProperty("user.home"),
               'WORKSPACE'  : workspace,
               'HUDSON_HOME': workspace,
               'JOB_NAME'   : "${new File(workspace).name}/$branchName",
               'BRANCH_NAME': branchName]
    def agent = new NoneAgent(env)
    def userDefinedEnvironmentVariables = [:]
    def userDefinedVolumes = [:]
    def includedStages = []
    def isIncludedStage = false
    def stagePath = []
    def agentId = 1

    def setEnvironmentVariables(env) {
        this.userDefinedEnvironmentVariables = env
    }

    def setVolumes(volumes) {
        this.userDefinedVolumes = volumes
    }

    def setIncludedStages(includedStages) {
        this.includedStages = includedStages
    }

    def pipeline(Closure body) { body() }

    def options(Closure body) { body() }

    def timeout(Map props) {}

    def timestamps() {}

    def disableConcurrentBuilds() {}

    def buildDiscarder(Object discarder) {}

    def logRotator(Map props) {}

    def triggers(Closure body) { body() }

    def pollSCM(String chron) {}

    def agent(Closure body) { body() }
    def none = { agent = new NoneAgent(agent.env) }
    def any = { agent = new NoneAgent(agent.env) }

    def dockerfile(Closure body) { agent = new DockerfileAgent(agent.env); body() }

    def additionalBuildArgs(String args) { agent.additionalBuildArgs = args }

    def dir(String dir) { agent.dir = dir }

    def args(String args) { agent.args = templateEngine.createTemplate(args).make(env) }

    def docker(Closure body) { agent = new DockerAgent(agent.env); body() }

    def image(String image) { agent.image = image }

    def stages(Closure body) { 
        def managedAgent = !agent.running
        if (managedAgent) {
            agent.start(); 
        }
        try {
            body()
        } finally {
            if (managedAgent) {
                agent.stop()
            }
        }
    }

    def parallel(Closure body) { body() }

    def stage(String name, Closure body) {
        def prevAgent = agent
        def wasIncludedStage = isIncludedStage
        isIncludedStage = !includedStages || includedStages.contains(name) || wasIncludedStage
        stagePath += name
        body()
        stagePath.removeLast()
        isIncludedStage = wasIncludedStage
        agent = prevAgent
    }

    def when(Closure body) {}

    def failFast(boolean fail) {}

    def environment(Closure body) {
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = agent.env
        body()
        // removing variable automatically added by delegate
        agent.env.remove('out')
    }

    def credentials(String credentialsId) {}

    def steps(Closure body) {
        if (!isIncludedStage) {
            return
        }; 
        println "Stage " + stagePath.join(">")
        def managedAgent = !agent.running
        if (managedAgent) {
            agent.start(); 
        }
        try {
            body()
        } finally {
            if (managedAgent) {
                agent.stop()
            }
        }
    }

    def lock(String resourceName, Closure body) { body() }

    def stash(Map props) {}

    def unstash(String name) {}

    def archiveArtifacts(String include) {}

    def input(Closure body) { body() }

    def message(String message) {}

    def echo(String msg) { println msg }

    def sh(String script) { agent.run(script) }

    def sh(Map args) { sh(args["script"]) }

    def script(Closure body){ body() }

    def post(Closure body) {  }

    def junit(String testResults) {}

    class NoneAgent {

        def env
        def running = true

        NoneAgent(env) {
            this.env = env.clone()
        }

        def start() {}

        def buildEnvVars() {
            // we give more priority to user defined variables, over variables defined in jenkinsfile, so we override any vars set
            env + LocalPiper.this.userDefinedEnvironmentVariables
        }

        def run(String script) { 
            Command.exec(['/bin/bash', '-c', script], buildEnvVars()) }

        def stop() {}
    }

    class DockerAgent extends NoneAgent {

        String image
        String args
        def containerId

        DockerAgent(env) {
            super(env)
            running = false
            this.env.remove('HOME')
        }

        def start() {
            def commandArgs = ['docker','run','-t','-d','-u','0:0'
                               ,'-v','/var/run/docker.sock'
                               ,'-v',"$workspace:$workspace"
                               ,'-w',"$workspace"]
            LocalPiper.this.userDefinedVolumes.each {
                commandArgs.add('-v')
                commandArgs.add(it)
            }
            if (args) {
                commandArgs.addAll(CommandLine.parse(args).toStrings())
            }
            buildEnvVars().each { k, v -> commandArgs += ['-e',"$k=$v"] }
            commandArgs += [image, 'cat']
            println ">>$commandArgs<<"
            containerId = Command.exec(commandArgs as String[])
            containerId = containerId.substring(0, containerId.length() - 1)
            running = true
        }

        def run(String script) {
            def commandLine = "docker exec $containerId /bin/sh -c".split(' ') + [script]
            Command.exec(commandLine as String[])
        }

        def stop() { 
            Command.exec("docker rm -fv $containerId")
            running = false
        }

    }

    class DockerfileAgent extends DockerAgent {

        static int imageId = 0

        String dir
        String additionalBuildArgs

        DockerfileAgent(env) {
            super(env)
        }

        def start() {
            image = "pipekins-${imageId++}"
            def buildArgs = "-t $image"
            if (additionalBuildArgs) {
                buildArgs += " $additionalBuildArgs"
            }
            Command.exec("docker build $buildArgs $dir")
            super.start()
        }

    }

}

class Command {

    static def exec(String cmd) {
        exec(cmd.split(' '))
    }

    static def exec(String[] cmd) {
        exec(cmd, null)
    }

    static def exec(String[] cmd, Map<String, String> env) {
        println "Executing: $cmd with env: $env"
        def envArr = env?.collect { key, value -> "$key=$value" } as String[]
        def p = cmd.execute(envArr, null)
        def output = new StringBuilder()
        p.waitForProcessOutput(new Appendable() {
            Appendable append(char c) {
                System.out.append(c)
                output.append(c)
            }

            Appendable append(CharSequence csq) {
                System.out.append(csq)
                output.append(csq)
            }

            Appendable append(CharSequence csq, int start, int end) {
                System.out.append(csq, start, end)
                output.append(csq, start, end)
            }

        }, System.err)
        def exitCode = p.exitValue()
        if (exitCode) {
            throw new IllegalStateException("Exit code: $exitCode")
        }
        output.toString()
    }

}

def failWithMessage(cli, msg) {
    println msg
    cli.usage()
    System.exit(1)
}

def scriptName = this.getClass().simpleName
def cli = new CliBuilder(usage: "$scriptName stages",
        footer: """examples: 
    ${scriptName} build test
    """,
        stopAtNonOption: true)
cli.with {
    h longOpt: 'help', 'Show usage information'
    e longOpt: 'environment-variable', args: 1, argName: 'varName=varValue',
            'Environment variable to use in the pipeline which overrides a pipeline defined ' +
                    'environment variable'
    v longOpt: 'volume', args: 1, argName: 'hostPath:containerPath',
            'Volume to mount in every docker image used'
}
def options = cli.parse(args)
if (!options) {
    failWithMessage(cli, 'Problem parsing options')
}
if (options.h) {
    cli.usage()
    System.exit(0)
}

def pipeline = new GroovyShell().parse(new File('Jenkinsfile'))
pipeline.metaClass.mixin LocalPiper
pipeline.setIncludedStages(options.arguments())
if (options.es) {
    pipeline.setEnvironmentVariables(options.es.collectEntries { v ->
        def separatorPosition = v.indexOf('=')
        [(v.substring(0, separatorPosition)): v.substring(separatorPosition + 1)]
    })
}
if (options.vs) {
    pipeline.setVolumes(options.vs)
}
pipeline.run()
